Creating models using SBML
===========================

The `SBML <https://sbml.org/>`_ integration into memilio works via the ``sbml_to_memilio`` executable. 
Building it requires the installation of `libsbml <https://sbml.org/software/libsbml/>`_ . Then the general build command will produce the executable at ``build/bin/sbml_to_memilio``. 

Building the converter
---------------------------------

To build the executable, the following steps are necessary:

1. Install ``libsbml``. The latest releases are available on `GitHub <https://github.com/sbmlteam/libsbml/releases>`_, advice can be found in the `documentation <https://sbml.org/software/libsbml/libsbml-docs/api/c/>`_.
2. Create the Cmake files. At the time of writing, the libsbml package installed with default settings could not be found by cmake. Therefore, you have to hint cmake to the location of the ``sbml-config.cmake``, e.g. by adding the flag ``-Dsbml_DIR=<path-to-libsbml>`` during the confugration step.
3. Build the memilio project with the general build command (see the `documentation <https://memilio.readthedocs.io/en/latest/cpp/installation.html>`_ for details).
4. The files generated by ``sbml_to_memilio`` will only be nicely formatted, if `clang-format <https://clang.llvm.org/docs/ClangFormat.html>`_ is installed. It will work also without it, but installing it is recommended.

For more information on the build process, please refer to :doc:`../getting_started`.


Usage
------
Call the executable on a given SBML file as 

.. code:: bash

    ./build/bin/sbml_to_memilio <sbml-file>


If `clang-format <https://clang.llvm.org/docs/ClangFormat.html>`_ is not installed, it will end with an error, but produce the necessary files nevertheless.

It will produce 

 - a folder that can be copied to the ``cpp/models``-directory of the memilio repository
 - an implementation-file that can be copied to the ``cpp/examples``-directory of the memilio repository
 - a file called ``CMakeListsAddition.txt`` that contains the necessary additions to the ``cpp/examples/CMakeLists.txt``-file to include the new model in the build process.
 - a file called ``CMakeListsFolderNames.txt`` that contains the necessary additions to the ``cpp/CMakeLists.txt`` to include the new model directory in the build process (`starting in line 151 <https://github.com/SciCompMod/memilio/blob/main/cpp/CMakeLists.txt#L151>`_).

 Once the directory and example file are copied to the correct locations and the necessary changes to the CMakeLists are done, 
 calling the general build function will also build an executable for the new model. For more information on building memilio, we refer to :doc:`../getting_started`.
 

Changing parameters
----------------------
As some parameters (mainly the duration of simulation) are not part of the SBML file, they are set to generic values in 
the generated example file. They can also be changed there.


Limitations
-------------
Not every feature implemented in SBML is also supported by memilio.
The following features are the most important not supported features:

    - Events not triggered by time
    - Usage of multiple SBML-compartments
    - Rules (unless they are RateRules)

As in an SBML file all species have to be given seperately, it is unfortunately also not possible to automatically use the Population in MEmilio to stratify the population into different compartments.

In general: Please check your models after the conversion to ensure that everything is working as expected.

BioModels Database
-------------------

The `BioModels Database <https://www.ebi.ac.uk/biomodels/>`_ contains many models written in SBML, also quite a few models for epidemiological contexts. If you created your own SBML file for your model, don't forget to upload it there ;) .