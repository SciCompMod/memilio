name: "Test Python"
description: "Test the Python bindings and library."
inputs:
  package:
    description: "Package to run the tests for."
    required: true
  version:
    description: "Python version to use for the test."
    required: false
    default: "3.8"
  coverage:
    description: "Generate coverage report from running the tests, ON or OFF, default OFF."
    required: false
    default: "OFF"
runs:
  using: "composite"
  steps:
    - name: Install dependencies
      shell: bash
      run: |
        sudo apt-get -qq update
        if [[ "${{ inputs.package }}" == "generation" ]]; then
          sudo apt-get -qq -y install python3-pip gnupg clang libclang-dev cmake
        else
          sudo apt-get -qq -y install python3-pip gnupg
        fi
        python -m pip install --upgrade pip
    - name: Download Python Wheels
      uses: actions/download-artifact@v4
      with:
        name: python-wheels-${{ inputs.package }}
        path: pycode/wheelhouse
    - name: Download Python Wheels from epidata for plot package
      uses: actions/download-artifact@v4
      if:  inputs.package == 'plot'
      with:
        name: python-wheels-epidata
        path: pycode/wheelhouse
    - name: Download Python Wheels from simulation for surrogatemodel
      uses: actions/download-artifact@v4
      if:  inputs.package == 'surrogatemodel'
      with:
        name: python-wheels-simulation
        path: pycode/wheelhouse
    - name: Set up Python ${{ inputs.version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.version }}
    - name: Install Python Wheels
      shell: bash
      run: |
        export PYTHON_VERSION_NO_DOT=$(echo "${{ inputs.version }}" | sed 's/\.//g')
        for pkg in `ls pycode/wheelhouse/*cp$PYTHON_VERSION_NO_DOT*.whl`; do python -m pip install $pkg; done # packages that contain native extensions are version specific
        for pkg in `ls pycode/wheelhouse/*py3*.whl`; do python -m pip install $pkg; done # pure python packages are not version specific
        pip install -r pycode/memilio-${{ inputs.package }}/requirements-dev.txt
    - name: Run unit tests
      shell: bash
      run: |
        cd pycode/memilio-${{inputs.package}}/memilio/${{inputs.package}}_test
        if [[ "${{ inputs.coverage }}" == "ON" ]]; then
          python -W ignore::DeprecationWarning -m coverage run --include=**/site-packages/memilio/* -m unittest
          python -m coverage report
          python -m coverage xml -o coverage_python.xml
          python -m coverage html -d coverage_python
          cp -r coverage_python ../../../../
        else
          python -m unittest
        fi
        
        if [[ "${{ inputs.package }}" == "epidata" ]]; then
          getcasedata --help
          getpopuldata --help
          getjhdata --help
          getdividata --help
          getsimdata --help
          cleandata --help
          getcommutermobility --help
          getvaccinationdata --help
          gethospitalizationdata --help
        fi
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: test-py-coverage-reports-${{ inputs.package }}-${{ inputs.version }}
        path: |
          pycode/memilio-${{ inputs.package }}/**/coverage_python_${{ inputs.version }}.xml
          coverage_python
        retention-days: 7
        if-no-files-found: ${{ inputs.coverage == 'ON' && 'error' || 'ignore' }}
