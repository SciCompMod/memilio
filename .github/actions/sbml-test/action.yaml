name: "SBML Compile and Run Test"
description: "Compile the SBML integrator, run it on a test example and compile the result."
inputs:
  artifact-pattern:
    description: "Name of the build artifact that contains the unit test binary, and coverage artifacts that will be uploaded."
    required: true
  optional-deps:
    description: "Optional dependencies of unit test binary (ON or OFF, default ON). If OFF, adds `-nodep` to the artifact name."
    required: false
    default: "ON"
runs:
  using: "composite"
  steps:
    - name: Install Dependencies
      shell: bash
      run: |
        sudo apt-get -qq update
        sudo apt-get -qq -y install gcc-13
        sudo apt-get -qq -y install g++-13
        sudo apt-get -qq -y install libbz2-dev libbz2-1.0
        sudo apt-get -qq -y install libsbml5t64 libsbml5-dev
        sudo apt-get -qq -y install ccache
        sudo apt-get -qq update
    - name: ccache
      id: ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        # free total space for cache available on github is limited to 10GB, so only save on main branch;
        # other branches will try to use cache from main, but branches that are too old won't benefit;
        save: ${{ github.ref_name == 'main' }} 
        # set enough space per build cache to keep a few previous versions to be used by older branches
        # debug builds require more space
        max-size: ${{ inputs.config == 'Release' && '200M' || '1G' }} 
        # saves cache as `ccache-<key>-<timestamp>` (timestamp added automatically, key must be unique, github caches are never overwritten)
        # key should be a composite of all options that affect the compilation
        key: linux-${{ inputs.compiler }}-${{ inputs.version }}-${{ inputs.config }}-covOFF-depON-ompOFF-sanOFF
        # load most recent cache where a prefix of the key matches a restore-key, e.g. from the most recent nightly run of the same build
        restore-keys: linux-${{ inputs.compiler }}-${{ inputs.version }}-${{ inputs.config }}-covOFF-depON-ompOFF-sanOFF
    - name: Download built test directory
      uses: actions/download-artifact@v4
      with:
        name: build-cpp-linux-${{ inputs.artifact-pattern }}${{ inputs.optional-deps == 'OFF' && '-nodep' || ''}}
        path: cpp
    - name: extract build archive
      shell: bash
      run: |
        cd cpp
        tar -xzf build.tar.gz
        echo "Ld dpkg "
        dpkg -L libsbml5-dev
    - name: Build SBML converter
      shell: bash
      run: |
        realpath .
        ls
        echo "Old code:"
        cd cpp/build
        cmake -DCMAKE_BUILD_TYPE=${{ inputs.config }} -DMEMILIO_ENABLE_IPOPT=ON -Dsbml_DIR=/usr/lib/x86_64-linux-gnu/cmake ..
        cmake --build . -j 4
    - name: Run sbml importer
      shell: bash
      run: | 
        cd cpp
        ./build/bin/sbml_to_memilio tests/data/sbml_test.sbml
    - name: Compile result
      shell: bash
      run: |
        cd cpp/build
        cmake -DCMAKE_BUILD_TYPE=${{ inputs.config }} -DMEMILIO_ENABLE_IPOPT=ON -Dsbml_DIR=/usr/lib/x86_64-linux-gnu/cmake ..
        cmake --build . -j 4
    # - name: Run unit tests
    #   shell: bash
    #   # always run tests as cmake target coverage
    #   # does not return an error if a test fails
    #   run: |
    #     cd cpp/build/bin
    #     sudo chmod a+x memilio-test
    #     ./memilio-test  --gtest_output="xml:report.xml" --gtest_repeat=${{ inputs.num-repeat }}
    # - name: Compute code coverage
    #   shell: bash
    #   # compute code coverage
    #   run: |
    #     if [[ "${{ inputs.coverage }}" == "ON" ]]; then
    #       cd cpp/build
    #       cmake --build . --target coverage/fast
    #     fi
    # - name: Upload test report
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: test-cpp-linux-report-${{ inputs.artifact-pattern }}${{ inputs.optional-deps == 'OFF' && '-nodep' || ''}}
    #     path: cpp/build/bin/report.xml
    #     if-no-files-found: error
    #     retention-days: 1
    # - name: Upload coverage reports
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: test-cpp-coverage-reports-${{ inputs.artifact-pattern }}${{ inputs.optional-deps == 'OFF' && '-nodep' || ''}}
    #     path: |
    #       cpp/build/coverage.info
    #       cpp/build/coverage
    #     # coverage is only calculated from latest gcc debug build
    #     if-no-files-found: ${{ inputs.coverage == 'OFF' && 'ignore' || 'error' }}
    #     retention-days: 1
